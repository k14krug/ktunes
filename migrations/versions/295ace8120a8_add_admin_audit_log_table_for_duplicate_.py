"""Add admin audit log table for duplicate management

Revision ID: 295ace8120a8
Revises: cef21eeab88a
Create Date: 2025-08-01 16:21:35.195350

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '295ace8120a8'
down_revision = 'cef21eeab88a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop the spotify_resolution_view temporarily to avoid conflicts during table alterations
    op.execute("DROP VIEW IF EXISTS spotify_resolution_view")
    
    # Drop tables only if they exist
    try:
        with op.batch_alter_table('apscheduler_jobs', schema=None) as batch_op:
            batch_op.drop_index('ix_apscheduler_jobs_next_run_time')
        op.drop_table('apscheduler_jobs')
    except:
        pass
    
    try:
        op.drop_table('_alembic_tmp_Users')
    except:
        pass
        
    try:
        op.drop_table('_alembic_tmp_tracks')
    except:
        pass
        
    try:
        op.drop_table('playlist_song_play_counts')
    except:
        pass
    with op.batch_alter_table('Users', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
        batch_op.alter_column('username',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
        batch_op.alter_column('password',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)

    with op.batch_alter_table('played_tracks', schema=None) as batch_op:
        batch_op.drop_index('idx_played_tracks_source')
        batch_op.drop_index('idx_played_tracks_source_played_at')

    with op.batch_alter_table('playlists', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
        batch_op.alter_column('playlist_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
        batch_op.alter_column('playlist_date',
               existing_type=sa.TEXT(),
               type_=sa.DateTime(),
               existing_nullable=False)
        batch_op.alter_column('artist',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
        batch_op.alter_column('song',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
        batch_op.alter_column('category',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
        batch_op.alter_column('artist_common_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
        batch_op.alter_column('username',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
        batch_op.drop_index('idx_playlists_artist_song')
        batch_op.drop_index('idx_playlists_name_date')
        batch_op.drop_index('idx_playlists_name_date_position')

    with op.batch_alter_table('tracks', schema=None) as batch_op:
        try:
            batch_op.drop_index('idx_tracks_date_added')
        except:
            pass
        try:
            batch_op.drop_index('idx_tracks_last_play_dt')
        except:
            pass
        try:
            batch_op.drop_index('idx_tracks_play_cnt')
        except:
            pass
        try:
            batch_op.drop_column('spotify_uri')
        except:
            pass

    # Create admin audit log table
    op.create_table('admin_audit_logs',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('action_type', sa.String(length=50), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('timestamp', sa.DateTime(), nullable=False),
        sa.Column('details', sa.JSON(), nullable=False),
        sa.Column('affected_tracks', sa.Integer(), nullable=False),
        sa.Column('success', sa.Boolean(), nullable=False),
        sa.Column('error_message', sa.String(), nullable=True),
        sa.Column('ip_address', sa.String(length=45), nullable=True),
        sa.Column('user_agent', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['Users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_audit_logs_timestamp', 'admin_audit_logs', ['timestamp'], unique=False)
    op.create_index('idx_audit_logs_action_type', 'admin_audit_logs', ['action_type'], unique=False)
    op.create_index('idx_audit_logs_user', 'admin_audit_logs', ['user_id', 'timestamp'], unique=False)
    op.create_index('idx_audit_logs_success', 'admin_audit_logs', ['success', 'timestamp'], unique=False)

    # Recreate the spotify_resolution_view
    op.execute("""
        CREATE VIEW spotify_resolution_view AS
        SELECT 
            t.id as track_id,
            t.song as local_song,
            t.artist as local_artist,
            t.album as local_album,
            su.uri as spotify_uri,
            su.status as match_status,
            su.created_at as match_date,
            
            -- Get Spotify track name and artist from played_tracks that match this URI
            pt.song as spotify_song,
            pt.artist as spotify_artist,
            
            -- Generate the "searched_for" and "found" strings like JSON
            (t.song || ' by ' || t.artist) as searched_for,
            (COALESCE(pt.song, 'Unknown') || ' by ' || COALESCE(pt.artist, 'Unknown')) as found,
            
            -- Derive the Spotify URL from URI (extract track ID after last colon)
            ('https://open.spotify.com/track/' || SUBSTR(su.uri, LENGTH(su.uri) - 21)) as spotify_url,
            
            -- Match quality indicators
            CASE 
                WHEN su.status = 'matched' THEN 'Perfect Match'
                WHEN su.status = 'mismatch_accepted' THEN 'Accepted Mismatch' 
                WHEN su.status = 'manual_match' THEN 'Manual Override'
                WHEN su.status = 'unmatched' THEN 'Needs Resolution'
                WHEN su.status = 'not_found_in_spotify' THEN 'Not on Spotify'
                ELSE su.status 
            END as resolution_category,
            
            -- Additional useful fields
            t.category as track_category,
            t.last_play_dt as last_played,
            su.id as spotify_uri_id

        FROM tracks t
        JOIN spotify_uris su ON t.id = su.track_id
        LEFT JOIN played_tracks pt ON pt.spotify_id = SUBSTR(su.uri, LENGTH(su.uri) - 21)
            AND pt.source = 'spotify'
            AND pt.id = (
                -- Get the most recent played_tracks entry for this spotify_id
                SELECT MAX(id) FROM played_tracks pt2 
                WHERE pt2.spotify_id = SUBSTR(su.uri, LENGTH(su.uri) - 21)
                AND pt2.source = 'spotify'
            )
        WHERE su.status IN ('mismatch_accepted', 'manual_match', 'unmatched', 'not_found_in_spotify')
        ORDER BY su.created_at DESC
    """)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('tracks', schema=None) as batch_op:
        batch_op.add_column(sa.Column('spotify_uri', sa.VARCHAR(), nullable=True))
        batch_op.create_index('idx_tracks_play_cnt', ['play_cnt'], unique=False)
        batch_op.create_index('idx_tracks_last_play_dt', ['last_play_dt'], unique=False)
        batch_op.create_index('idx_tracks_date_added', ['date_added'], unique=False)

    with op.batch_alter_table('playlists', schema=None) as batch_op:
        batch_op.create_index('idx_playlists_name_date_position', ['playlist_name', 'playlist_date', 'track_position'], unique=False)
        batch_op.create_index('idx_playlists_name_date', ['playlist_name', 'playlist_date'], unique=False)
        batch_op.create_index('idx_playlists_artist_song', ['artist', 'song'], unique=False)
        batch_op.alter_column('username',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('artist_common_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('category',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('song',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('artist',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('playlist_date',
               existing_type=sa.DateTime(),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('playlist_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('played_tracks', schema=None) as batch_op:
        batch_op.create_index('idx_played_tracks_source_played_at', ['source', 'played_at'], unique=False)
        batch_op.create_index('idx_played_tracks_source', ['source'], unique=False)

    with op.batch_alter_table('Users', schema=None) as batch_op:
        batch_op.alter_column('password',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('username',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    op.create_table('playlist_song_play_counts',
    sa.Column('song', sa.TEXT(), nullable=True),
    sa.Column('artist_common_name', sa.TEXT(), nullable=True),
    sa.Column('playlist_play_cnt', sa.INTEGER(), nullable=True),
    sa.PrimaryKeyConstraint('song', 'artist_common_name')
    )
    op.create_table('_alembic_tmp_tracks',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('song', sa.VARCHAR(), nullable=True),
    sa.Column('artist', sa.VARCHAR(), nullable=True),
    sa.Column('album', sa.VARCHAR(), nullable=True),
    sa.Column('location', sa.VARCHAR(), nullable=True),
    sa.Column('category', sa.VARCHAR(), nullable=True),
    sa.Column('play_cnt', sa.INTEGER(), nullable=True),
    sa.Column('played_sw', sa.VARCHAR(), server_default=sa.text('0'), nullable=True),
    sa.Column('artist_common_name', sa.VARCHAR(), nullable=True),
    sa.Column('ktunes_play_cnt', sa.INTEGER(), nullable=True),
    sa.Column('last_play_dt', sa.DATETIME(), nullable=True),
    sa.Column('date_added', sa.DATETIME(), nullable=True),
    sa.Column('ktunes_last_play_dt', sa.DATETIME(), nullable=True),
    sa.Column('most_recent_playlist', sa.VARCHAR(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('_alembic_tmp_Users',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('username', sa.VARCHAR(), nullable=False),
    sa.Column('password', sa.VARCHAR(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('apscheduler_jobs',
    sa.Column('id', sa.VARCHAR(length=191), nullable=False),
    sa.Column('next_run_time', sa.FLOAT(), nullable=True),
    sa.Column('job_state', sa.BLOB(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('apscheduler_jobs', schema=None) as batch_op:
        batch_op.create_index('ix_apscheduler_jobs_next_run_time', ['next_run_time'], unique=False)

    # ### end Alembic commands ###
